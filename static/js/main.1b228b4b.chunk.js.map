{"version":3,"sources":["authProvider.js","blocks/admin.js","posts/admin.js","users/admin.js","admin.js","Listen.js","Post.js","App.js","serviceWorker.js","index.js"],"names":["loginUri","process","authProvider","login","username","password","request","Request","method","body","JSON","stringify","email","credentials","headers","Headers","fetch","then","response","status","Error","statusText","localStorage","setItem","catch","logout","removeItem","Promise","resolve","checkError","error","reject","checkAuth","getItem","getPermissions","getIdentity","parse","first_name","last_name","BlockCreate","props","post_id_string","location","search","post_id","redirect","Create","SimpleForm","defaultValue","NumberInput","source","validate","required","ReferenceInput","label","reference","SelectInput","optionText","BlockEdit","Edit","blockSort","field","order","PostTitle","record","title","PostCreate","DateInput","TextInput","PostEdit","disabled","ReferenceManyField","target","sort","Datagrid","TextField","EditButton","AddNewBlockButton","Button","component","Link","to","pathname","id","PostShowActions","basePath","data","CardActions","ListButton","RefreshButton","PostShow","Show","actions","SimpleShowLayout","DateField","PostList","List","rowClick","UserTitle","UserCreate","type","PasswordInput","UserEdit","UserShow","UserList","dataProvider","jsonServerProvider","url","options","Accept","fetchUtils","fetchJson","AdminComponent","Admin","Resource","name","list","edit","create","show","Component","API_URL","Post","state","objUrl","post","slug","this","pubDate","format","isodate","pub_date","className","key","getUrl","posts","map","_id","PostIndex","res","json","setState","err","callAPI","PostBlock","text","AllHtmlEntities","decode","block","PostBlockList","blocks","PostDetail","match","params","intro","AdminDashboard","path","WebApp","Fragment","Header","Home","href","App","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"8WAEMA,EAAQ,UAAMC,6BAAN,iBAgDCC,EA9CoB,CACjCC,MAAO,YAA6B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACZC,EAAU,IAAIC,QAAJ,UAAeP,GAAY,CACzCQ,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEC,MAAOR,EAAUC,SAAUA,IAClDQ,YAAa,UACbC,QAAS,IAAIC,QAAQ,CAAE,eAAgB,uBAEzC,OAAOC,MAAMV,GACVW,MAAK,SAAAC,GACJ,GAAIA,EAASC,OAAS,KAAOD,EAASC,QAAU,IAC9C,MAAM,IAAIC,MAAMF,EAASG,YAG3B,OADAC,aAAaC,QAAQ,QAAQ,GACtBL,EAAST,QAEjBe,OAAM,WACL,MAAM,IAAIJ,MAAM,qBAGtBK,OAAQ,WAEN,OADAH,aAAaI,WAAW,QACjBC,QAAQC,WAEjBC,WAAY,SAACC,GACX,IAAMX,EAASW,EAAMX,OACrB,OAAe,MAAXA,GAA6B,MAAXA,GACpBG,aAAaI,WAAW,QACjBC,QAAQI,UAGVJ,QAAQC,WAEjBI,UAAW,kBACTV,aAAaW,QAAQ,QAAUN,QAAQC,UAAYD,QAAQI,UAC7DG,eAAgB,kBAAMP,QAAQI,OAAO,mBACrCI,YAAa,WACX,IAAK,IAAD,EACgCzB,KAAK0B,MAAMd,aAAaW,QAAQ,SAA1DI,EADN,EACMA,WAAYC,EADlB,EACkBA,UACpB,OAAOX,QAAQC,QAAQ,CAAES,aAAYC,cACrC,MAAOR,GACP,OAAOH,QAAQI,OAAOD,M,4HCxCfS,EAAc,SAAAC,GAAU,IAClBC,EAAmBL,gBAAMI,EAAME,SAASC,QAAjDC,QACFA,EAAUH,GAAkC,GAC5CI,EAAWD,EAAO,iBAAaA,EAAb,SAA8B,OAEtD,OACE,gBAACE,EAAA,EAAWN,EACV,gBAACO,EAAA,EAAD,CACEC,aAAc,CAAEJ,WAChBC,SAAUA,GAEV,gBAACI,EAAA,EAAD,CAAaC,OAAO,aAAaC,SAAUC,gBAC3C,gBAAC,IAAD,CAAeF,OAAO,OAAOC,SAAUC,gBACvC,gBAACC,EAAA,EAAD,CAAgBC,MAAM,OAAOJ,OAAO,UAAUK,UAAU,SACtD,gBAACC,EAAA,EAAD,CAAaC,WAAW,cAOrBC,EAAY,SAAClB,GACxB,OACE,gBAACmB,EAAA,EAAD,iBAAUnB,EAAV,CAAiBK,SAAS,SACtB,gBAACE,EAAA,EAAD,KACI,gBAACE,EAAA,EAAD,CAAaC,OAAO,aAAaC,SAAUC,gBAC3C,gBAAC,IAAD,CAAeF,OAAO,OAAOC,SAAUC,gBACvC,gBAACC,EAAA,EAAD,CAAgBC,MAAM,OAAOJ,OAAO,UAAUK,UAAU,SACtD,gBAACC,EAAA,EAAD,CAAaC,WAAW,c,6HCzBhCG,EAAY,CAACC,MAAO,aAAcC,MAAO,OAEzCC,EAAY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjB,OAAO,oCAAYA,EAAM,WAAOA,EAAOC,MAAd,KAAyB,KAGzCC,EAAa,SAAC1B,GAAD,OACtB,gBAACM,EAAA,EAAD,eAAQmB,MAAO,gBAAC,EAAD,OAAmBzB,GAC9B,gBAACO,EAAA,EAAD,KACE,gBAACoB,EAAA,EAAD,CAAWb,MAAM,mBAAmBJ,OAAO,WAAWC,SAAUC,gBAChE,gBAACgB,EAAA,EAAD,CAAWlB,OAAO,QAAQC,SAAUC,gBACpC,gBAACgB,EAAA,EAAD,CAAWlB,OAAO,OAAOC,SAAUC,gBACnC,gBAAC,IAAD,CAAeF,OAAO,QAAQC,SAAUC,mBAKrCiB,EAAW,SAAC7B,GACvB,OACE,gBAACmB,EAAA,EAAD,eAAMM,MAAO,gBAAC,EAAD,OAAmBzB,GAC5B,gBAACO,EAAA,EAAD,KACI,gBAACqB,EAAA,EAAD,CAAWE,UAAQ,EAAChB,MAAM,KAAKJ,OAAO,OACtC,gBAACiB,EAAA,EAAD,CAAWb,MAAM,mBAAmBJ,OAAO,WAAWC,SAAUC,gBAChE,gBAACgB,EAAA,EAAD,CAAWlB,OAAO,QAAQC,SAAUC,gBACpC,gBAACgB,EAAA,EAAD,CAAWlB,OAAO,OAAOC,SAAUC,gBACnC,gBAAC,IAAD,CAAeF,OAAO,QAAQC,SAAUC,gBACxC,gBAACmB,EAAA,EAAD,CAAoBjB,MAAM,SAASC,UAAU,SAASiB,OAAO,UAAUC,KAAMb,GAC3E,gBAACc,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAWL,UAAQ,EAAChB,MAAM,KAAKJ,OAAO,OACtC,gBAACyB,EAAA,EAAD,CAAWzB,OAAO,eAClB,gBAACyB,EAAA,EAAD,CAAWzB,OAAO,SAClB,gBAAC0B,EAAA,EAAD,WAQVC,EAAoB,SAAC,GAAgB,IAAdb,EAAa,EAAbA,OAC3B,OAAIA,EAEA,gBAACc,EAAA,EAAD,CACEC,UAAWC,IACXC,GAAI,CACFC,SAAU,iBACVvC,OAAO,YAAD,OAAcqB,EAAOmB,KAE7B7B,MAAM,eAEN,gBAAC,IAAD,OAMJ,mCAIE8B,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAb,OACtB,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAYH,SAAUA,IACtB,gBAACI,EAAA,EAAD,MACA,gBAAC,EAAD,CAAmBzB,OAAQsB,MAIlBI,EAAW,SAAAlD,GAAK,OAC3B,gBAACmD,EAAA,EAAD,iBAAUnD,EAAV,CAAiBoD,QAAS,gBAAC,EAAD,QACxB,gBAACC,EAAA,EAAD,KACE,gBAAClB,EAAA,EAAD,CAAWzB,OAAO,UAClB,gBAAC4C,EAAA,EAAD,CAAW5C,OAAO,aAClB,gBAACqB,EAAA,EAAD,CAAoBjB,MAAM,SAASC,UAAU,SAASiB,OAAO,UAAUC,KAAMb,GAC3E,gBAACc,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAWL,UAAQ,EAAChB,MAAM,KAAKJ,OAAO,OACtC,gBAACyB,EAAA,EAAD,CAAWzB,OAAO,eAClB,gBAACyB,EAAA,EAAD,CAAWzB,OAAO,SAClB,gBAAC0B,EAAA,EAAD,WAOGmB,EAAW,SAACvD,GAAD,OACpB,gBAACwD,EAAA,EAASxD,EACN,gBAACkC,EAAA,EAAD,CAAUuB,SAAS,QACf,gBAACtB,EAAA,EAAD,CAAWzB,OAAO,UAClB,gBAAC4C,EAAA,EAAD,CAAW5C,OAAO,gB,SC7FxBgD,EAAY,SAAC,GAAgB,IAAdlC,EAAa,EAAbA,OACjB,OAAO,oCAAYA,EAAM,WAAOA,EAAOpD,MAAd,KAAyB,KAGzCuF,EAAa,SAAC3D,GAAD,OACtB,gBAACM,EAAA,EAAD,eAAQmB,MAAO,gBAAC,EAAD,OAAmBzB,GAC9B,gBAACO,EAAA,EAAD,KACE,gBAACqB,EAAA,EAAD,CAAWd,MAAM,gBAAgBJ,OAAO,QAAQkD,KAAK,QAAQjD,SAAUC,gBACvE,gBAACiD,EAAA,EAAD,CAAe/C,MAAM,WAAWJ,OAAO,WAAWC,SAAUC,gBAC5D,gBAACgB,EAAA,EAAD,CAAWlB,OAAO,eAClB,gBAACkB,EAAA,EAAD,CAAWlB,OAAO,iBAKfoD,GAAW,SAAC9D,GACvB,OACE,gBAACmB,EAAA,EAAD,eAAMM,MAAO,gBAAC,EAAD,OAAmBzB,GAC5B,gBAACO,EAAA,EAAD,KACI,gBAACqB,EAAA,EAAD,CAAWE,UAAQ,EAAChB,MAAM,KAAKJ,OAAO,OACtC,gBAACiB,EAAA,EAAD,CAAWG,UAAQ,EAAChB,MAAM,UAAUJ,OAAO,YAC3C,gBAACkB,EAAA,EAAD,CAAWd,MAAM,gBAAgBJ,OAAO,QAAQkD,KAAK,QAAQjD,SAAUC,gBACvE,gBAACgB,EAAA,EAAD,CAAWlB,OAAO,eAClB,gBAACkB,EAAA,EAAD,CAAWlB,OAAO,iBAMjBqD,GAAW,SAAA/D,GAAK,OAC3B,gBAACmD,EAAA,EAASnD,EACR,gBAACqD,EAAA,EAAD,KACE,gBAAClB,EAAA,EAAD,CAAWzB,OAAO,UAClB,gBAACyB,EAAA,EAAD,CAAWzB,OAAO,eAClB,gBAACyB,EAAA,EAAD,CAAWzB,OAAO,cAClB,gBAAC4C,EAAA,EAAD,CAAW5C,OAAO,eAKXsD,GAAW,SAAChE,GAAD,OACpB,gBAACwD,EAAA,EAASxD,EACN,gBAACkC,EAAA,EAAD,CAAUuB,SAAS,QACf,gBAACtB,EAAA,EAAD,CAAWzB,OAAO,UAClB,gBAACyB,EAAA,EAAD,CAAWzB,OAAO,eAClB,gBAACyB,EAAA,EAAD,CAAWzB,OAAO,cAClB,gBAAC4C,EAAA,EAAD,CAAW5C,OAAO,eChCxBuD,GAAeC,YAAmBzG,8BARrB,SAAC0G,GAAuB,IAAlBC,EAAiB,uDAAP,GAKjC,OAJKA,EAAQ9F,UACX8F,EAAQ9F,QAAU,IAAIC,QAAQ,CAAE8F,OAAQ,sBAE1CD,EAAQ/F,YAAc,UACfiG,IAAWC,UAAUJ,EAAKC,MAK7BI,GAAiB,kBACrB,gBAACC,EAAA,EAAD,CAAOR,aAAcA,GAAcvG,aAAcA,GAC/C,gBAACgH,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAMrB,EAAUsB,KAAMhD,EAAUiD,OAAQpD,EAAYqD,KAAM7B,IACjF,gBAACwB,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAMZ,GAAUa,KAAMf,GAAUgB,OAAQnB,EAAYoB,KAAMhB,KACjF,gBAACW,EAAA,EAAD,CAAUC,KAAK,SAASE,KAAM3D,EAAW4D,OAAQ/E,M,oEClB5BiF,Y,4DCEnBC,I,OAAUxH,8BAGVyH,G,oDACJ,WAAYlF,GAAQ,IAAD,+BACjB,cAAMA,IACDmF,MAAQ,CACXC,OAAO,QAAD,OAAU,EAAKpF,MAAMqF,KAAKC,OAHjB,E,sDAQjB,MAAM,QAAN,OAAeC,KAAKvF,MAAMqF,KAAKC,Q,+BAI/B,IAAME,EAAUC,aAAOC,KAAQH,KAAKvF,MAAMqF,KAAKM,UAAW,aAE1D,OACE,yBAAKC,UAAU,+BAA+BC,IAAKN,KAAKM,KACtD,yBAAKD,UAAU,kBAAkBJ,GACjC,yBAAKI,UAAU,aACb,yBAAKA,UAAU,cACb,4BAAI,kBAAC,IAAD,CAAMnD,GAAI8C,KAAKO,UAAWP,KAAKvF,MAAMqF,KAAK5D,QAC9C,uBAAGmE,UAAU,QAAQJ,U,GArBdR,aA6BbzB,G,2KAEF,OACE,yBAAKqC,UAAU,aACZL,KAAKvF,MAAM+F,MAAMC,KAAI,SAACX,GAAD,OACpB,kBAAC,GAAD,CAAMA,KAAMA,EAAMQ,IAAKR,EAAKY,c,GALfjB,aAYjBkB,G,oDACJ,WAAYlG,GAAQ,IAAD,+BACjB,cAAMA,IACDmF,MAAQ,CACXY,MAAO,IAHQ,E,uDAOR,IAAD,OACRvH,MAAM,GAAD,OAAIyG,GAAJ,WACFxG,MAAK,SAAA0H,GAAG,OAAIA,EAAIC,UAChB3H,MAAK,SAAA0H,GAAQ,EAAKE,SAAS,CAACN,MAAOI,OACnCnH,OAAM,SAAAsH,GAAG,OAAIA,O,0CAIhBf,KAAKgB,Y,+BAIL,IAAMR,EAAQR,KAAKJ,MAAMY,MAEzB,OACE,yBAAKH,UAAU,mBACb,yBAAKA,UAAU,kBACb,kBAAC,GAAD,CAAUG,MAAOA,U,GAzBHf,aAgClBwB,G,oDACJ,WAAYxG,GAAQ,wCACZA,G,sDAIN,IACMyG,GADW,IAAIC,oBACCC,OAAOpB,KAAKvF,MAAM4G,MAAM3I,MAE9C,OACE,yBAAK2H,UAAU,gBAAgBC,IAAKN,KAAKM,KACvC,yBAAKD,UAAU,QAAQhG,KAAM6G,S,GAXbzB,aAiBlB6B,G,2KAEF,OACE,yBAAKjB,UAAU,cACZL,KAAKvF,MAAM8G,OAAOd,KAAI,SAACY,GAAD,OACrB,kBAAC,GAAD,CAAWA,MAAOA,EAAOf,IAAKe,EAAMX,c,GALlBjB,aAYtB+B,G,oDACJ,WAAY/G,GAAQ,IAAD,+BACjB,cAAMA,IAEDmF,MAAQ,CACXE,KAAM,MAJS,E,uDAQR,IAAD,OACR7G,MAAM,GAAD,OAAIyG,GAAJ,kBAAqBM,KAAKvF,MAAMgH,MAAMC,OAAO3B,OAC/C7G,MAAK,SAAA0H,GAAG,OAAIA,EAAIC,UAChB3H,MAAK,SAAA0H,GAAG,OAAI,EAAKE,SAAS,CAAChB,KAAMc,OACjCnH,OAAM,SAAAsH,GAAG,OAAIA,O,0CAIhBf,KAAKgB,Y,+BAIL,GAAIhB,KAAKJ,MAAME,KAAM,CACnB,IAAMG,EAAUC,aAAOC,KAAQH,KAAKJ,MAAME,KAAKM,UAAW,aAEpDuB,GADW,IAAIR,oBACEC,OAAOpB,KAAKJ,MAAME,KAAK6B,OAE9C,OACE,6BAAStB,UAAU,aACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,QAAQJ,IAEzB,yBAAKI,UAAU,qBACb,yBAAKA,UAAU,yBACb,wBAAIA,UAAU,cAAcL,KAAKJ,MAAME,KAAK5D,OACjD,yBAAKmE,UAAU,QAAQJ,IAEpB,yBAAKI,UAAU,cAAa,yBAAKA,UAAU,QAAQhG,KAAMsH,KACzD,kBAAC,GAAD,CAAeJ,OAAQvB,KAAKJ,MAAME,KAAKyB,YAOjD,OAAQ,6BAASlB,UAAU,kB,GA7CNZ,aClGzB,SAASmC,KACP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAAS7E,UAAWiC,MAKtC,SAAS6C,KACP,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,GAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOH,KAAK,aAAa7E,UAAWwE,KACpC,kBAAC,IAAD,CAAOK,KAAK,QACV,kBAAC,GAAD,OAEA,kBAAC,IAAD,CAAOA,KAAK,KACZ,kBAACI,GAAD,SAkBV,SAASD,KACP,OACE,4BAAQ3B,UAAU,0BAChB,yBAAKA,UAAU,gBACb,4BACE,kBAAC,IAAD,CAAMnD,GAAI,KAAV,eACA,kBAAC,IAAD,CAAMA,GAAI,QAAV,UAOV,SAAS+E,KACP,OACE,yBAAK5B,UAAU,aACb,gDACA,mCACH,2BACK,uBAAG6B,KAAK,gCAAgCzF,OAAO,UAA/C,UACA,6BACA,uBAAGyF,KAAK,2CAA2CzF,OAAO,UAA1D,cAMO0F,OAtCf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAON,KAAK,SAAS7E,UAAW4E,KAChC,kBAAC,IAAD,CAAOC,KAAK,IAAI7E,UAAW8E,QCjCfM,QACW,cAA7BC,OAAO1H,SAAS2H,UAEe,UAA7BD,OAAO1H,SAAS2H,UAEhBD,OAAO1H,SAAS2H,SAASb,MACvB,2DCZNc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5J,MAAK,SAAA6J,GACJA,EAAaC,gBAEdvJ,OAAM,SAAAM,GACLkJ,QAAQlJ,MAAMA,EAAMmJ,c","file":"static/js/main.1b228b4b.chunk.js","sourcesContent":["import { AuthProvider } from 'react-admin';\n\nconst loginUri = `${process.env.API_URL}/authenticate`;\n\nconst authProvider: AuthProvider = {\n  login: ({ username, password }) => {\n    const request = new Request(`${loginUri}`, {\n      method: 'POST',\n      body: JSON.stringify({ email: username, password: password }),\n      credentials: 'include',\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n    return fetch(request)\n      .then(response => {\n        if (response.status < 200 || response.status >= 300) {\n          throw new Error(response.statusText);\n        }\n        localStorage.setItem('auth', true);\n        return response.body;\n      })\n      .catch(() => {\n        throw new Error('Network error')\n      });\n  },\n  logout: () => {\n    localStorage.removeItem('auth');\n    return Promise.resolve();\n  },\n  checkError: (error) => {\n    const status = error.status;\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('auth');\n      return Promise.reject();\n    }\n    // other error code (404, 500, etc): no need to log out\n    return Promise.resolve();\n  },\n  checkAuth: () =>\n    localStorage.getItem('auth') ? Promise.resolve() : Promise.reject(),\n  getPermissions: () => Promise.reject('Unknown method'),\n  getIdentity: () => {\n    try {\n      const { first_name, last_name } = JSON.parse(localStorage.getItem('auth'));\n      return Promise.resolve({ first_name, last_name });\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n};\n\nexport default authProvider;\n","import * as React from \"react\";\nimport { Create, List, Edit, SimpleForm, SingleFieldList, ReferenceInput, SelectInput, ReferenceField, NumberField, ChipField, TextInput, NumberInput, DateInput, ReferenceManyField, Datagrid, TextField, DateField, EditButton, required } from 'react-admin';\nimport RichTextInput from 'ra-input-rich-text';\nimport { parse } from \"query-string\";\n\nexport const BlockCreate = props => {\n  const { post_id: post_id_string } = parse(props.location.search);\n  const post_id = post_id_string ? post_id_string : \"\";\n  const redirect = post_id ? `/posts/${post_id}/show` : \"show\";\n\n  return (\n    <Create {...props}>\n      <SimpleForm\n        defaultValue={{ post_id }}\n        redirect={redirect}\n      >\n        <NumberInput source=\"sort_order\" validate={required()} />\n        <RichTextInput source=\"body\" validate={required()} />\n        <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n          <SelectInput optionText=\"title\" />\n        </ReferenceInput>\n      </SimpleForm>\n    </Create>\n  );\n};\n\nexport const BlockEdit = (props) => {\n  return (\n    <Edit {...props} redirect=\"show\">\n        <SimpleForm>\n            <NumberInput source=\"sort_order\" validate={required()} />\n            <RichTextInput source=\"body\" validate={required()} />\n            <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n              <SelectInput optionText=\"title\" />\n            </ReferenceInput>\n        </SimpleForm>\n    </Edit>\n  )\n};\n\nexport const BlockList = props => (\n    <List {...props}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"id\" />\n            <NumberField source=\"sort_order\" />\n            <TextField source=\"body\" />\n            <ReferenceField source=\"post_id\" reference=\"posts\"><TextField source=\"id\" /></ReferenceField>\n        </Datagrid>\n    </List>\n);\n","import * as React from \"react\";\nimport { Create, List, Edit, SimpleForm, SingleFieldList, ChipField, TextInput, NumberInput, DateInput, ReferenceManyField, Datagrid, TextField, DateField, EditButton, required } from 'react-admin';\nimport RichTextInput from 'ra-input-rich-text';\n\nimport CardActions from \"@material-ui/core/CardActions\";\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\nimport { Show, SimpleShowLayout, Button, Link, ListButton, RefreshButton } from \"react-admin\";\n\nconst blockSort = {field: 'sort_order', order: 'ASC'};\n\nconst PostTitle = ({ record }) => {\n    return <span>Post {record ? `\"${record.title}\"` : ''}</span>;\n};\n\nexport const PostCreate = (props) => (\n    <Create title={<PostTitle />} {...props}>\n        <SimpleForm>\n          <DateInput label=\"Publication date\" source=\"pub_date\" validate={required()} />\n          <TextInput source=\"title\" validate={required()} />\n          <TextInput source=\"slug\" validate={required()} />\n          <RichTextInput source=\"intro\" validate={required()} />\n        </SimpleForm>\n    </Create>\n);\n\nexport const PostEdit = (props) => {\n  return (\n    <Edit title={<PostTitle />} {...props}>\n        <SimpleForm>\n            <TextInput disabled label=\"Id\" source=\"id\" />\n            <DateInput label=\"Publication date\" source=\"pub_date\" validate={required()} />\n            <TextInput source=\"title\" validate={required()} />\n            <TextInput source=\"slug\" validate={required()} />\n            <RichTextInput source=\"intro\" validate={required()} />\n            <ReferenceManyField label=\"Blocks\" reference=\"blocks\" target=\"post_id\" sort={blockSort}>\n              <Datagrid>\n                <TextField disabled label=\"Id\" source=\"id\" />\n                <TextField source=\"sort_order\" />\n                <TextField source=\"body\" />\n                <EditButton />\n              </Datagrid>\n            </ReferenceManyField>\n        </SimpleForm>\n    </Edit>\n  )\n};\n\nconst AddNewBlockButton = ({ record }) => {\n  if (record) {\n    return (\n      <Button\n        component={Link}\n        to={{\n          pathname: \"/blocks/create\",\n          search: `?post_id=${record.id}`,\n        }}\n        label=\"Add a block\"\n      >\n        <ChatBubbleIcon />\n      </Button>\n    )\n  }\n\n  return (\n    <div>Emp</div>\n  )\n};\n\nconst PostShowActions = ({ basePath, data }) => (\n  <CardActions>\n    <ListButton basePath={basePath} />\n    <RefreshButton />\n    <AddNewBlockButton record={data} />\n  </CardActions>\n);\n\nexport const PostShow = props => (\n  <Show {...props} actions={<PostShowActions />}>\n    <SimpleShowLayout>\n      <TextField source=\"title\" />\n      <DateField source=\"pub_date\" />\n      <ReferenceManyField label=\"Blocks\" reference=\"blocks\" target=\"post_id\" sort={blockSort}>\n        <Datagrid>\n          <TextField disabled label=\"Id\" source=\"id\" />\n          <TextField source=\"sort_order\" />\n          <TextField source=\"body\" />\n          <EditButton />\n        </Datagrid>\n      </ReferenceManyField>\n    </SimpleShowLayout>\n  </Show>\n);\n\nexport const PostList = (props) => (\n    <List {...props}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"title\" />\n            <DateField source=\"pub_date\" />\n        </Datagrid>\n    </List>\n);\n","import * as React from \"react\";\nimport { Create, List, Edit, SimpleForm, SingleFieldList, ChipField, TextInput, NumberInput, PasswordInput, DateInput, ReferenceManyField, Datagrid, TextField, DateField, EditButton, required } from 'react-admin';\nimport { Show, SimpleShowLayout, Button, Link, ListButton, RefreshButton } from \"react-admin\";\n\nconst UserTitle = ({ record }) => {\n    return <span>User {record ? `\"${record.email}\"` : ''}</span>;\n};\n\nexport const UserCreate = (props) => (\n    <Create title={<UserTitle />} {...props}>\n        <SimpleForm>\n          <TextInput label=\"Email Address\" source=\"email\" type=\"email\" validate={required()} />\n          <PasswordInput label=\"Password\" source=\"password\" validate={required()} />\n          <TextInput source=\"first_name\" />\n          <TextInput source=\"last_name\" />\n        </SimpleForm>\n    </Create>\n);\n\nexport const UserEdit = (props) => {\n  return (\n    <Edit title={<UserTitle />} {...props}>\n        <SimpleForm>\n            <TextInput disabled label=\"Id\" source=\"id\" />\n            <DateInput disabled label=\"Created\" source=\"created\" />\n            <TextInput label=\"Email Address\" source=\"email\" type=\"email\" validate={required()} />\n            <TextInput source=\"first_name\" />\n            <TextInput source=\"last_name\" />\n        </SimpleForm>\n    </Edit>\n  )\n};\n\nexport const UserShow = props => (\n  <Show {...props}>\n    <SimpleShowLayout>\n      <TextField source=\"email\" />\n      <TextField source=\"first_name\" />\n      <TextField source=\"last_name\" />\n      <DateField source=\"created\" />\n    </SimpleShowLayout>\n  </Show>\n);\n\nexport const UserList = (props) => (\n    <List {...props}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"email\" />\n            <TextField source=\"first_name\" />\n            <TextField source=\"last_name\" />\n            <DateField source=\"created\" />\n        </Datagrid>\n    </List>\n);\n","import * as React from 'react';\n\nimport { Admin, Resource, fetchUtils } from \"react-admin\";\nimport jsonServerProvider from \"ra-data-json-server\";\n\nimport authProvider from \"./authProvider\";\nimport { BlockCreate, BlockEdit, BlockList } from \"./blocks/admin\";\nimport { PostCreate, PostEdit, PostList, PostShow } from \"./posts/admin\";\nimport { UserCreate, UserEdit, UserList, UserShow } from \"./users/admin\";\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) {\n    options.headers = new Headers({ Accept: 'application/json' });\n  }\n  options.credentials = 'include';\n  return fetchUtils.fetchJson(url, options);\n}\n\nconst dataProvider = jsonServerProvider(process.env.API_URL, httpClient);\n\nconst AdminComponent = () => (\n  <Admin dataProvider={dataProvider} authProvider={authProvider}>\n    <Resource name=\"posts\" list={PostList} edit={PostEdit} create={PostCreate} show={PostShow} />\n    <Resource name=\"users\" list={UserList} edit={UserEdit} create={UserCreate} show={UserShow} />\n    <Resource name=\"blocks\" edit={BlockEdit} create={BlockCreate} />\n  </Admin>\n);\n\nexport { AdminComponent }\n","import React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport YoutubeEmbedVideo from \"youtube-embed-video\";\nimport './Listen.scss'\n\n\nclass ListenPage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      videoId: \"2chfsFTNEXw\",\n    }\n  }\n\n  render() {\n    return (\n      <section className='listen-page'>\n        <div className=\"video-wrap\">\n          <YoutubeEmbedVideo videoId={this.state.videoId} autoplay={true} enhancedPrivacy={true} showInfo={false} controls={false} suggestions={false} />\n        </div>\n      </section>\n    )\n  }\n}\n\nexport { ListenPage };\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport parse from 'html-react-parser';\nimport { AllHtmlEntities } from 'html-entities';\nimport { format } from 'date-fns'\nimport isodate from 'isodate'\nimport './Post.scss'\n\nconst API_URL = process.env.API_URL\n\n\nclass Post extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      objUrl: `/log/${this.props.post.slug}`\n    }\n  }\n\n  getUrl() {\n    return `/log/${this.props.post.slug}`\n  }\n\n  render () {\n    const pubDate = format(isodate(this.props.post.pub_date), 'MMMM d, y')\n\n    return (\n      <div className=\"post-listing listing-default\" key={this.key}>\n        <div className=\"post-date-wrap\">{pubDate}</div>\n        <div className=\"text-wrap\">\n          <div className=\"title-wrap\">\n            <h4><Link to={this.getUrl()}>{this.props.post.title}</Link></h4>\n            <p className=\"date\">{pubDate}</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass PostList extends Component {\n  render() {\n    return (\n      <div className=\"post-list\">\n        {this.props.posts.map((post) => (\n          <Post post={post} key={post._id} />\n        ))}\n      </div>\n    )\n  }\n}\n\nclass PostIndex extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      posts: [],\n    }\n  }\n\n  callAPI() {\n    fetch(`${API_URL}/posts`)\n      .then(res => res.json())\n      .then(res => {this.setState({posts: res})})\n      .catch(err => err)\n  }\n\n  componentDidMount() {\n    this.callAPI()\n  }\n\n  render() {\n    const posts = this.state.posts\n\n    return (\n      <div className=\"post-index-page\">\n        <div className=\"post-list-wrap\">\n          <PostList posts={posts} />\n        </div>\n      </div>\n    );\n  }\n}\n\nclass PostBlock extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render () {\n    const entities = new AllHtmlEntities()\n    const text = entities.decode(this.props.block.body)\n\n    return (\n      <div className=\"block-listing\" key={this.key}>\n        <div className=\"text\">{parse(text)}</div>\n      </div>\n    )\n  }\n}\n\nclass PostBlockList extends Component {\n  render() {\n    return (\n      <div className=\"block-list\">\n        {this.props.blocks.map((block) => (\n          <PostBlock block={block} key={block._id} />\n        ))}\n      </div>\n    )\n  }\n}\n\nclass PostDetail extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      post: null\n    }\n  }\n\n  callAPI() {\n    fetch(`${API_URL}/posts/${this.props.match.params.slug}`)\n      .then(res => res.json())\n      .then(res => this.setState({post: res}))\n      .catch(err => err)\n  }\n\n  componentDidMount() {\n    this.callAPI()\n  }\n\n  render() {\n    if (this.state.post) {\n      const pubDate = format(isodate(this.state.post.pub_date), 'MMMM d, y')\n      const entities = new AllHtmlEntities()\n      const intro = entities.decode(this.state.post.intro)\n\n      return (\n        <section className='blog-post'>\n          <div className=\"post-wrap\">\n            <div className=\"post-date-wrap\">\n              <div className=\"date\">{pubDate}</div>\n            </div>\n            <div className=\"post-content-wrap\">\n              <div className=\"post-title title-wrap\">\n                <h3 className=\"fontSize-m\">{this.state.post.title}</h3>\n      \t\t\t\t\t<div className=\"date\">{pubDate}</div>\n              </div>\n              <div className=\"intro-wrap\"><div className=\"text\">{parse(intro)}</div></div>\n              <PostBlockList blocks={this.state.post.blocks} />\n            </div>\n          </div>\n        </section>\n      )\n    }\n\n    return (<section className='blog-post'/>)\n  }\n}\n\nexport { PostDetail, PostIndex };\n","import 'normalize.css'\n\nimport React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.scss'\n\nimport { AdminComponent } from './admin';\nimport { ListenPage } from './Listen';\nimport { PostIndex, PostDetail } from './Post';\n\nfunction AdminDashboard() {\n  return (\n    <Switch>\n      <Route path=\"/admin\" component={AdminComponent} />\n    </Switch>\n  )\n}\n\nfunction WebApp() {\n  return (\n    <React.Fragment>\n      <Header />\n      <Switch>\n        <Route path=\"/log/:slug\" component={PostDetail} />\n        <Route path=\"/log\">\n          <PostIndex />\n        </Route>\n          <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </React.Fragment>\n  )\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/admin' component={AdminDashboard} />\n        <Route path='/' component={WebApp} />\n      </Switch>\n    </Router>\n  )\n}\n\nfunction Header() {\n  return (\n    <header className=\"main-header structural\">\n      <div className=\"header-title\">\n        <h3>\n          <Link to={\"/\"}>Luke Cossey</Link>\n          <Link to={\"/log\"}>Log</Link>\n        </h3>\n      </div>\n    </header>\n  )\n}\n\nfunction Home() {\n  return (\n    <div className=\"home-wrap\">\n      <p>Software Engineer</p>\n      <p>&nbsp;</p>\n\t\t\t<p>\n        <a href=\"https://github.com/cosseyluke\" target=\"_blank\">GitHub</a>\n        <br />\n        <a href=\"https://www.linkedin.com/in/luke-cossey/\" target=\"_blank\">LinkedIn</a>\n      </p>\n\t\t</div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}