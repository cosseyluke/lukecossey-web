{"version":3,"sources":["Listen.js","Post.js","App.js","serviceWorker.js","index.js"],"names":["Component","API_URL","process","Post","props","state","objUrl","post","slug","this","pubDate","format","isodate","pub_date","className","key","to","getUrl","title","PostList","posts","map","_id","PostIndex","fetch","then","res","json","console","log","setState","catch","err","callAPI","PostBlock","text","AllHtmlEntities","decode","block","parse","PostBlockList","blocks","PostDetail","match","params","intro","Header","Home","href","target","App","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.dfec8943.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport YoutubeEmbedVideo from \"youtube-embed-video\";\nimport './Listen.scss'\n\n\nclass ListenPage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      videoId: \"2chfsFTNEXw\",\n    }\n  }\n\n  render() {\n    return (\n      <section className='listen-page'>\n        <div className=\"video-wrap\">\n          <YoutubeEmbedVideo videoId={this.state.videoId} autoplay={true} enhancedPrivacy={true} showInfo={false} controls={false} suggestions={false} />\n        </div>\n      </section>\n    )\n  }\n}\n\nexport { ListenPage };\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport parse from 'html-react-parser';\nimport { AllHtmlEntities } from 'html-entities';\nimport { format } from 'date-fns'\nimport isodate from 'isodate'\nimport './Post.scss'\n\nconst API_URL = process.env.API_URL\n\n\nclass Post extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      objUrl: `/log/${this.props.post.slug}`\n    }\n  }\n\n  getUrl() {\n    return `/log/${this.props.post.slug}`\n  }\n\n  render () {\n    const pubDate = format(isodate(this.props.post.pub_date), 'MMMM d, y')\n\n    return (\n      <div className=\"post-listing listing-default\" key={this.key}>\n        <div className=\"post-date-wrap\">{pubDate}</div>\n        <div className=\"text-wrap\">\n          <div className=\"title-wrap\">\n            <h4><Link to={this.getUrl()}>{this.props.post.title}</Link></h4>\n            <p className=\"date\">{pubDate}</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass PostList extends Component {\n  render() {\n    return (\n      <div className=\"post-list\">\n        {this.props.posts.map((post) => (\n          <Post post={post} key={post._id} />\n        ))}\n      </div>\n    )\n  }\n}\n\nclass PostIndex extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      posts: [],\n    }\n  }\n\n  callAPI() {\n    fetch(`${API_URL}/posts`)\n      .then(res => res.json())\n      .then(res => {console.log('res', res.posts); this.setState({posts: res})})\n      .catch(err => err)\n  }\n\n  componentDidMount() {\n    this.callAPI()\n  }\n\n  render() {\n    const posts = this.state.posts\n\n    return (\n      <div className=\"post-index-page\">\n        <div className=\"post-list-wrap\">\n          <PostList posts={posts} />\n        </div>\n      </div>\n    );\n  }\n}\n\nclass PostBlock extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render () {\n    const entities = new AllHtmlEntities()\n    const text = entities.decode(this.props.block.text)\n\n    return (\n      <div className=\"block-listing\" key={this.key}>\n        <div className=\"text\">{parse(text)}</div>\n      </div>\n    )\n  }\n}\n\nclass PostBlockList extends Component {\n  render() {\n    return (\n      <div className=\"block-list\">\n        {this.props.blocks.map((block) => (\n          <PostBlock block={block} key={block._id} />\n        ))}\n      </div>\n    )\n  }\n}\n\nclass PostDetail extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      post: null\n    }\n  }\n\n  callAPI() {\n    fetch(`${API_URL}/posts/${this.props.match.params.slug}`)\n      .then(res => res.json())\n      .then(res => this.setState({post: res}))\n      .catch(err => err)\n  }\n\n  componentDidMount() {\n    this.callAPI()\n  }\n\n  render() {\n    if (this.state.post) {\n      const pubDate = format(isodate(this.state.post.pub_date), 'MMMM d, y')\n      const entities = new AllHtmlEntities()\n      const intro = entities.decode(this.state.post.intro)\n\n      return (\n        <section className='blog-post'>\n          <div className=\"post-wrap\">\n            <div className=\"post-date-wrap\">\n              <div className=\"date\">{pubDate}</div>\n            </div>\n            <div className=\"post-content-wrap\">\n              <div className=\"post-title title-wrap\">\n                <h3 className=\"fontSize-m\">{this.state.post.title}</h3>\n      \t\t\t\t\t<div className=\"date\">{pubDate}</div>\n              </div>\n              <div className=\"intro-wrap\"><div className=\"text\">{parse(intro)}</div></div>\n              <PostBlockList blocks={this.state.post.blocks} />\n            </div>\n          </div>\n        </section>\n      )\n    }\n\n    return (<section className='blog-post'/>)\n  }\n}\n\nexport { PostDetail, PostIndex };\n","import 'normalize.css'\n\nimport React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.scss'\n\nimport { ListenPage } from './Listen';\nimport { PostIndex, PostDetail } from './Post';\n\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route path=\"/log/:slug\" component={PostDetail} />\n        <Route path=\"/log\">\n          <PostIndex />\n        </Route>\n          <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nfunction Header() {\n  return (\n    <header className=\"main-header structural\">\n      <div className=\"header-title\">\n        <h3>\n          <Link to={\"/\"}>Luke Cossey</Link>\n          <Link to={\"/log\"}>Log</Link>\n        </h3>\n      </div>\n    </header>\n  )\n}\n\nfunction Home() {\n  return (\n    <div className=\"home-wrap\">\n      <p>Software Engineer</p>\n      <p>&nbsp;</p>\n\t\t\t<p>\n        <a href=\"https://github.com/cosseyluke\" target=\"_blank\">GitHub</a>\n        <br />\n        <a href=\"https://www.linkedin.com/in/luke-cossey/\" target=\"_blank\">LinkedIn</a>\n      </p>\n\t\t</div>\n  )\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       apiResponse: \"\",\n//     }\n//   }\n//\n//   callAPI() {\n//     fetch(\"http://localhost:9000/testAPI\")\n//       .then(res => res.text())\n//       .then(res => this.setState({apiResponse: res}))\n//       .catch(err => err)\n//   }\n//\n//   componentDidMount() {\n//     this.callAPI()\n//   }\n//\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         </header>\n//         <p className=\"App-intro\">\n//           {this.state.apiResponse}\n//         </p>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}