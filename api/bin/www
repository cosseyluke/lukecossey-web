#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../src/app');
var debug = require('debug')('api:server');
var http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

class AppServer {
  constructor(app, opts = {}) {
    this.app = app
    this.port = normalizePort(opts.port || '9000')

    /**
     * Get port from environment and store in Express.
     */
    this.app.set('port', this.port);

    /**
     * Create HTTP server.
     */
    this.server = http.createServer(this.app);

    /**
     * Listen on provided port, on all network interfaces.
     */
    this.server.listen(this.port);
    this.server.on('error', (error) => {
      this.onError(error)
    });
    this.server.on('listening', () => {
      this.onListening()
    });
  }

  /**
   * Event listener for HTTP server "error" event.
   */
  onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof this.port === 'string'
      ? 'Pipe ' + this.port
      : 'Port ' + this.port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */
  onListening() {
    var addr = this.server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}

const apps = [
  new AppServer(app, {port: process.env.PORT})
]
